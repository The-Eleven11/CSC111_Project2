
@software{noauthor_googlemapsgoogle-maps-services-python_2025,
	title = {googlemaps/google-maps-services-python},
	rights = {Apache-2.0},
	url = {https://github.com/googlemaps/google-maps-services-python},
	abstract = {Python client library for Google Maps {API} Web Services},
	publisher = {Google Maps Platform},
	urldate = {2025-03-04},
	date = {2025-03-04},
	note = {original-date: 2014-08-15T04:35:30Z},
	keywords = {client-library, python},
}

@online{noauthor_distance_nodate,
	title = {Distance Matrix {API} overview {\textbar} Distance Matrix {API} (Legacy)},
	url = {https://developers.google.com/maps/documentation/distance-matrix/overview},
	titleaddon = {Google for Developers},
	urldate = {2025-03-04},
	langid = {english},
	file = {Snapshot:C\:\\Users\\yangj\\Zotero\\storage\\BC2YIU22\\overview.html:text/html},
}

@online{noauthor_welcome_nodate,
	title = {Welcome to Flask — Flask Documentation (3.1.x)},
	url = {https://flask.palletsprojects.com/en/stable/},
	urldate = {2025-03-04},
	file = {Welcome to Flask — Flask Documentation (3.1.x):C\:\\Users\\yangj\\Zotero\\storage\\WTG4XBPR\\stable.html:text/html},
}

@inreference{noauthor_dijkstras_2025,
	title = {Dijkstra's algorithm},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm&oldid=1274358893},
	abstract = {Dijkstra's algorithm ( {DYKE}-strəz) is an algorithm for finding the shortest paths between nodes in a weighted graph, which may represent, for example, a road network. It was conceived by computer scientist Edsger W. Dijkstra in 1956 and published three years later.
Dijkstra's algorithm finds the shortest path from a given source node to every other node.: 196–206  It can be used to find the shortest path to a specific destination node, by terminating the algorithm after determining the shortest path to the destination node. For example, if the nodes of the graph represent cities, and the costs of edges represent the average distances between pairs of cities connected by a direct road, then Dijkstra's algorithm can be used to find the shortest route between one city and all other cities. A common application of shortest path algorithms is network routing protocols, most notably {IS}-{IS} (Intermediate System to Intermediate System) and {OSPF} (Open Shortest Path First). It is also employed as a subroutine in algorithms such as Johnson's algorithm.
The algorithm uses a min-priority queue data structure for selecting the shortest paths known so far. Before more advanced priority queue structures were discovered, Dijkstra's original algorithm ran in 
  
    
      
        Θ
        (
        
          {\textbar}
        
        V
        
          
            {\textbar}
          
          
            2
          
        
        )
      
    
    \{{\textbackslash}displaystyle {\textbackslash}Theta ({\textbar}V{\textbar}{\textasciicircum}\{2\})\}
  
 time, where 
  
    
      
        
          {\textbar}
        
        V
        
          {\textbar}
        
      
    
    \{{\textbackslash}displaystyle {\textbar}V{\textbar}\}
  
 is the number of nodes. Fredman \& Tarjan 1984 proposed a Fibonacci heap priority queue to optimize the running time complexity to 
  
    
      
        Θ
        (
        
          {\textbar}
        
        E
        
          {\textbar}
        
        +
        
          {\textbar}
        
        V
        
          {\textbar}
        
        log
        ⁡
        
          {\textbar}
        
        V
        
          {\textbar}
        
        )
      
    
    \{{\textbackslash}displaystyle {\textbackslash}Theta ({\textbar}E{\textbar}+{\textbar}V{\textbar}{\textbackslash}log {\textbar}V{\textbar})\}
  
. This is asymptotically the fastest known single-source shortest-path algorithm for arbitrary directed graphs with unbounded non-negative weights. However, specialized cases (such as bounded/integer weights, directed acyclic graphs etc.) can be improved further. If preprocessing is allowed, algorithms such as contraction hierarchies can be up to seven orders of magnitude faster.
Dijkstra's algorithm is commonly used on graphs where the edge weights are positive integers or real numbers. It can be generalized to any graph where the edge weights are partially ordered, provided the subsequent labels (a subsequent label is produced when traversing an edge) are monotonically non-decreasing.
In many fields, particularly artificial intelligence, Dijkstra's algorithm or a variant offers a uniform cost search and is formulated as an instance of the more general idea of best-first search.},
	booktitle = {Wikipedia},
	urldate = {2025-03-04},
	date = {2025-02-06},
	langid = {english},
	note = {Page Version {ID}: 1274358893},
	file = {Snapshot:C\:\\Users\\yangj\\Zotero\\storage\\VMSV25JQ\\Dijkstra's_algorithm.html:text/html},
}

@online{noauthor_nearest_nodate,
	title = {Nearest neighbour algorithm - Wikipedia},
	url = {https://en.wikipedia.org/wiki/Nearest_neighbour_algorithm},
	urldate = {2025-03-30},
	file = {Nearest neighbour algorithm - Wikipedia:C\:\\Users\\yangj\\Zotero\\storage\\F3HF4CDP\\Nearest_neighbour_algorithm.html:text/html},
}

@online{noauthor_travelling_nodate,
	title = {Travelling salesman problem - Wikipedia},
	url = {https://en.wikipedia.org/wiki/Travelling_salesman_problem},
	urldate = {2025-03-30},
}

@inreference{noauthor_list_2024,
	title = {List of University of Toronto buildings},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=List_of_University_of_Toronto_buildings&oldid=1262571492},
	abstract = {The University of Toronto is made up of several academic and administrative buildings at each of its three campuses.
Note: The building codes are enclosed by square brackets for the simplicity to search.},
	booktitle = {Wikipedia},
	urldate = {2025-03-30},
	date = {2024-12-12},
	langid = {english},
	note = {Page Version {ID}: 1262571492},
	file = {Snapshot:C\:\\Users\\yangj\\Zotero\\storage\\V4QI5IVZ\\List_of_University_of_Toronto_buildings.html:text/html},
}
